--[[
  Automower® Connect API

  This API allows you to control and obtain information about Automower®.

  The version of the OpenAPI document: 1.0.0
  
  Generated by: https://openapi-generator.tech
]]

--package connect

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local connect_json_api_data_document_command_result = require "connect.model.json_api_data_document_command_result"
local connect_json_api_data_document_list_command_result = require "connect.model.json_api_data_document_list_command_result"
local connect_json_api_error_document = require "connect.model.json_api_error_document"
local connect__mowers__id__actions_post_request = require "connect.model._mowers__id__actions_post_request"
local connect__mowers__id__calendar_post_request = require "connect.model._mowers__id__calendar_post_request"
local connect__mowers__id__settings_post_request = require "connect.model._mowers__id__settings_post_request"

local actions_api = {}
local actions_api_mt = {
	__name = "actions_api";
	__index = actions_api;
}

local function new_actions_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://api.amc.husqvarna.dev/v1";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, actions_api_mt)
end

function actions_api:mowers_id_actions_post(id, _mowers__id__actions_post_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/mowers/%s/actions",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/vnd.api+json" }
	req.headers:upsert("accept", "application/vnd.api+json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/vnd.api+json" }
	req.headers:upsert("content-type", "application/vnd.api+json")

	req:set_body(dkjson.encode(_mowers__id__actions_post_request))

	-- api key in headers 'X-Api-Key'
	if self.api_key['X-Api-Key'] then
		req.headers:upsert("APIKeyHeader", self.api_key['X-Api-Key'])
	end
	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("Token", self.api_key['Authorization'])
	end
	-- api key in headers 'Authorization-Provider'
	if self.api_key['Authorization-Provider'] then
		req.headers:upsert("Provider", self.api_key['Authorization-Provider'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return connect_json_api_data_document_command_result.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function actions_api:mowers_id_calendar_post(id, _mowers__id__calendar_post_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/mowers/%s/calendar",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/vnd.api+json" }
	req.headers:upsert("accept", "application/vnd.api+json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/vnd.api+json" }
	req.headers:upsert("content-type", "application/vnd.api+json")

	req:set_body(dkjson.encode(_mowers__id__calendar_post_request))

	-- api key in headers 'X-Api-Key'
	if self.api_key['X-Api-Key'] then
		req.headers:upsert("APIKeyHeader", self.api_key['X-Api-Key'])
	end
	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("Token", self.api_key['Authorization'])
	end
	-- api key in headers 'Authorization-Provider'
	if self.api_key['Authorization-Provider'] then
		req.headers:upsert("Provider", self.api_key['Authorization-Provider'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return connect_json_api_data_document_command_result.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function actions_api:mowers_id_settings_post(id, _mowers__id__settings_post_request)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/mowers/%s/settings",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/vnd.api+json" }
	req.headers:upsert("accept", "application/vnd.api+json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/vnd.api+json" }
	req.headers:upsert("content-type", "application/vnd.api+json")

	req:set_body(dkjson.encode(_mowers__id__settings_post_request))

	-- api key in headers 'X-Api-Key'
	if self.api_key['X-Api-Key'] then
		req.headers:upsert("APIKeyHeader", self.api_key['X-Api-Key'])
	end
	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("Token", self.api_key['Authorization'])
	end
	-- api key in headers 'Authorization-Provider'
	if self.api_key['Authorization-Provider'] then
		req.headers:upsert("Provider", self.api_key['Authorization-Provider'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return connect_json_api_data_document_list_command_result.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_actions_api;
}
